import Observer from 'mokit/src/observer';

export function connect(model, component) {
  const proto = component.prototype;
  const trigger = function () {
    this.setState({ _model_: this.model });
  };
  const render = proto.render;
  proto.render = function () {
    if (!this._run_) {
      const modelInstance = (model instanceof Function) ? new model() : model;
      delete proto.model;
      Object.defineProperty(proto, 'model', {
        enumerable: false,
        get() { return modelInstance; }
      });
      const observer = new Observer(modelInstance);
      this._run_ = observer.run(render, trigger, this);
    }
    return this._run_.run();
  };
  const componentWillUnmount = proto.componentWillUnmount;
  proto.componentWillUnmount = function () {
    let result = null;
    if (componentWillUnmount) {
      result = componentWillUnmount.call(this);
    }
    if (this._run_) {
      observer.stop(this._run_);
      this._run_ = null;
    }
    return result;
  };
}

export function model(model, component) {
  return component ? connect(model, component) :
    connect.bind(null, model);
}

export default { connect, model };